[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[project]
name = "dynamo-utils"
version = "0.1.0"
description = "Utility for my discord bot"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.13"
dependencies = [
]

[tool.hatch.build.targets.wheel]
packages = [
    "src/dynamo_utils",
]

[dependency-groups]
dev = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
]

[tool.pytest.ini_options]
minversion = "7.0"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "session"
xfail_strict = true
testpaths = [
    "tests",
]

addopts = [
    "--strict-markers",
    "--strict-config",
    "--maxfail",
    "1",
    "--verbosity",
    "2",
    "--durations",
    "10",
    "--durations-min",
    "1.0",
]

log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"


[tool.ruff]
src = [
    "dynamo",
]
target-version = "py313"
line-length = 120
preview = true

[tool.ruff.lint]
select = [
    "A", "ANN", "ASYNC", "B", "BLE", "C4", "COM", "DTZ", "E",
    "EM", "ERA", "F", "FA", "FURB", "G", "I", "INP", "ISC", "NPY",
    "PD", "PERF", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PTH", "PYI",
    "Q", "Q003", "RET", "RSE", "RUF", "S", "SIM", "SLOT", "T20", "TC", "TID",
    "TRY", "UP", "YTT"
]

ignore = [
    "ANN401",  # Any is correct in some cases
    "ANN204",  # Return type for some dunders is cumbersome
    "D1",  # Well named items don't need docstrings
    "E501",  # Ruff handles this 
    "PLW3201",  # I want some dunders that have no "special meaning"
    "RET504",  # A bit too opinionated 
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "RUF029",  # Some interfaces need an async method
    "S101",  # Allow assert
    "ERA001",  # Allow commented out code
    "PLC0415",  # Top-of-file imports are not always best
]

unfixable = [
    "F841", # I'm planning to use it
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "PLR2004",
]

[tool.ruff.lint.pydocstyle]
convention = "google"
"ignore-decorators" = [
    "typing.overload",
]


[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.

"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"


[tool.pyright]
include = ["src"]
pythonVersion = "3.13"
typeCheckingMode = "strict"
pythonPlatform = "All"
reportCallInDefaultInitializer = "warning"
reportImportCycles = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "warning"
reportInvalidTypeForm = "information"
